definitions:
  dto.BadReqErrResponse:
    properties:
      failed_field:
        type: string
      message:
        type: string
      value: {}
    type: object
  dto.Credential:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL3BiZX...
        type: string
      expires_in:
        example: 3600
        type: integer
      refresh_token:
        example: e7e84d54-7518-4...
        type: string
    type: object
  dto.FileResponse:
    properties:
      url:
        example: file-example.jpg-6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b
        type: string
    type: object
  dto.GroupDto:
    properties:
      id:
        type: string
      leader_id:
        type: string
      members:
        items:
          $ref: '#/definitions/dto.UserDto'
        type: array
      token:
        type: string
    required:
    - leader_id
    - members
    - token
    type: object
  dto.JoinGroupRequest:
    properties:
      is_leader:
        type: boolean
      members:
        type: integer
      user_id:
        type: string
    required:
    - is_leader
    - members
    - user_id
    type: object
  dto.RedeemNewToken:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.ResponseBadRequestErr:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.BadReqErrResponse'
        type: array
      message:
        example: Invalid request body
        type: string
      status_code:
        example: 400
        type: integer
    type: object
  dto.ResponseForbiddenErr:
    properties:
      data: {}
      message:
        example: Insufficiency permission
        type: string
      status_code:
        example: 403
        type: integer
    type: object
  dto.ResponseGatewayTimeoutErr:
    properties:
      data: {}
      message:
        example: Connection timeout
        type: string
      status_code:
        example: 504
        type: integer
    type: object
  dto.ResponseInternalErr:
    properties:
      data: {}
      message:
        example: Internal service error
        type: string
      status_code:
        example: 500
        type: integer
    type: object
  dto.ResponseNotfoundErr:
    properties:
      data: {}
      message:
        example: Not found
        type: string
      status_code:
        example: 404
        type: integer
    type: object
  dto.ResponseServiceDownErr:
    properties:
      data: {}
      message:
        example: Service is down
        type: string
      status_code:
        example: 503
        type: integer
    type: object
  dto.ResponseUnauthorizedErr:
    properties:
      data: {}
      message:
        example: Invalid token
        type: string
      status_code:
        example: 401
        type: integer
    type: object
  dto.UserDto:
    properties:
      allergy_food:
        type: string
      allergy_medicine:
        type: string
      can_select_baan:
        type: boolean
      disease:
        type: string
      email:
        type: string
      firstname:
        type: string
      food_restriction:
        type: string
      group_id:
        type: string
      id:
        type: string
      lastname:
        type: string
      line_id:
        type: string
      nickname:
        type: string
      phone:
        type: string
      title:
        type: string
    required:
    - can_select_baan
    - firstname
    - lastname
    - line_id
    - nickname
    - phone
    - title
    type: object
  dto.Verify:
    properties:
      hcert:
        type: string
    required:
    - hcert
    type: object
  dto.VerifyTicket:
    properties:
      ticket:
        type: string
    required:
    - ticket
    type: object
  proto.Group:
    properties:
      id:
        type: string
      leaderID:
        type: string
      members:
        items:
          $ref: '#/definitions/proto.User'
        type: array
      token:
        type: string
    type: object
  proto.User:
    properties:
      allergyFood:
        type: string
      allergyMedicine:
        type: string
      canSelectBaan:
        type: boolean
      disease:
        type: string
      email:
        type: string
      faculty:
        type: string
      firstname:
        type: string
      foodRestriction:
        type: string
      groupId:
        type: string
      id:
        type: string
      imageUrl:
        type: string
      isVerify:
        type: boolean
      lastname:
        type: string
      lineID:
        type: string
      nickname:
        type: string
      phone:
        type: string
      studentID:
        type: string
      title:
        type: string
      year:
        type: string
    type: object
info:
  contact:
    email: sd.team.sgcu@gmail.com
    name: ISD Team
  description: "# RNKM API\r\nThis is the documentation for https://freshersfairs.com"
  title: RNKM Backend
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      description: Check is service heath is ok
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: health check
      tags:
      - health check
  /auth/me:
    get:
      consumes:
      - application/json
      description: Return the user dto if successfully
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/proto.User'
        "401":
          description: Invalid token
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "503":
          description: Service is down
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Check user status and user info
      tags:
      - auth
  /auth/refreshToken:
    post:
      consumes:
      - application/json
      description: Return the credentials if successfully
      parameters:
      - description: refresh token dto
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/dto.RedeemNewToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Credential'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "500":
          description: Internal service error
          schema:
            $ref: '#/definitions/dto.ResponseInternalErr'
        "503":
          description: Service is down
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      summary: Redeem new token
      tags:
      - auth
  /auth/verify:
    post:
      consumes:
      - application/json
      description: Return the credential if successfully
      parameters:
      - description: refresh token dto
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyTicket'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Credential'
        "500":
          description: Internal service error
          schema:
            $ref: '#/definitions/dto.ResponseInternalErr'
        "503":
          description: Service is down
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Verify ticket and get credential
      tags:
      - auth
  /file/upload:
    post:
      consumes:
      - multipart/form-data
      description: Return the filename if successfully
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.FileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
        "504":
          description: Gateway Timeout
          schema:
            $ref: '#/definitions/dto.ResponseGatewayTimeoutErr'
      security:
      - AuthToken: []
      summary: Upload the image
      tags:
      - file
  /group:
    post:
      consumes:
      - application/json
      description: Return the group dto if successfully
      parameters:
      - description: Group dto
        in: body
        name: groupDto
        required: true
        schema:
          $ref: '#/definitions/dto.GroupDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/proto.Group'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseNotfoundErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseInternalErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Create new group
      tags:
      - group
    put:
      consumes:
      - application/json
      description: Return the group dto if successfully
      parameters:
      - description: Group dto
        in: body
        name: groupDto
        required: true
        schema:
          $ref: '#/definitions/dto.GroupDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.Group'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ResponseForbiddenErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseNotfoundErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Update the existing group
      tags:
      - group
  /group/{token}:
    get:
      consumes:
      - application/json
      description: Return the group dto if successfully
      parameters:
      - description: id
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.Group'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseNotfoundErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Get the group data by token
      tags:
      - group
    post:
      consumes:
      - application/json
      description: Return the group dto if successfully
      parameters:
      - description: token
        in: path
        name: token
        required: true
        type: string
      - description: joinGroupRequest dto
        in: body
        name: joinRequest
        required: true
        schema:
          $ref: '#/definitions/dto.JoinGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.Group'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ResponseForbiddenErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseNotfoundErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Join the existing group
      tags:
      - group
  /group/leave:
    post:
      consumes:
      - application/json
      description: Return the group dto if successfully
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.Group'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ResponseForbiddenErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseNotfoundErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseInternalErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Leave the existing group and Create a new group
      tags:
      - group
  /group/members/{member_id}:
    delete:
      consumes:
      - application/json
      description: Return the group dto if successfully
      parameters:
      - description: id
        in: path
        name: member_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.Group'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ResponseForbiddenErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseNotfoundErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Delete member from the group
      tags:
      - group
  /user:
    post:
      consumes:
      - application/json
      description: Return the user dto if successfully
      parameters:
      - description: User DTO
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/proto.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ResponseForbiddenErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseNotfoundErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Create new user
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Return the user dto if successfully
      parameters:
      - description: user dto
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Create new user if it doesn't exist and Update the user data if exists
      tags:
      - user
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Return the user dto if successfully
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ResponseForbiddenErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseNotfoundErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Delete the user
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Return the user dto if successfully
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseNotfoundErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      summary: Get the user data by id
      tags:
      - user
  /vaccine/verify:
    post:
      consumes:
      - application/json
      description: Return nothing if success
      parameters:
      - description: verify dto
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.Verify'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: bool
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseForbiddenErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ResponseForbiddenErr'
      security:
      - AuthToken: []
      summary: Verify the user status
      tags:
      - vaccine
schemes:
- https
- http
securityDefinitions:
  AuthToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: "# Health Check Tag API Documentation\r\n**Health Check** functions
    goes here"
  name: health check
- description: "# Vaccine Tag API Documentation\r\n**Vaccine** functions goes here"
  name: vaccine
- description: "# Auth Tag API Documentation\r\n**Auth** functions goes here"
  name: auth
- description: "# User Tag API Documentation\r\n**User** functions goes here"
  name: user
- description: "# File Tag API Documentation\r\n**File** functions goes here"
  name: file
- description: "# Group Tag API Documentation\r\n**Group** functions goes here"
  name: group
- description: "# Baan Tag API Documentation\r\n**Baan** functions goes here"
  name: baan
- description: "# Event Tag API Documentation\r\n**Event** functions goes here"
  name: event
